
function clickPrint(e) {
    window.open('index.php?r=site/print&part='+$.part.active().attr('part-id')+'&h=40')
}

function clickPin(e) {
    var $pin=$(e.target),
        $pin_li=$pin.parent()

    if($pin_li.hasClass('active')) {
        $pin_li.removeClass('active')
        $pin.removeClass('btn-lg')
        $('#top-navbar').removeClass('navbar-fixed-top')
        $('#main-container').removeClass('pinned-mode')
    } else {
        $pin_li.addClass('active')
        $pin.addClass('btn-lg')
        $('#top-navbar').addClass('navbar-fixed-top')
        $('#main-container').addClass('pinned-mode')
    }
    e.preventDefault()
}

(function ($, window) {

    var fnBefore=null,
        fnOverlap=null,
        fnAfter=null,
        handlers=[]

    $.fn.onx = function ( state, types, fn) {

        if(state!=='enable' && state!='disable') {
            fn=types
            types=state
            state=null
        }
        //handlers[fn.toString()]={state: state}

        if (typeof types === "object" && (types.overlap!==undefined || types.before!==undefined || types.after!==undefined)) {
            fnOverlap = (types.overlap!==undefined) ? types.overlap : null
            fnBefore = (types.before!==undefined) ? types.before : null
            fnAfter = (types.after!==undefined) ? types.after : null
            return this
        }
        //var handler_id = fn.toString()
        this.on(types,  function(e) {

                //if(handlers[handler_id].state==='disable') {
                //    e.stopPropagation()
                //    e.preventDefault()
                //    return false
                //}

                if(fnOverlap!==null) {
                    fnOverlap();
                    fnOverlap=null;
                    e.stopPropagation()
                    e.preventDefault()
                    return false
                }
                if(fnBefore!==null) {
                    fnBefore();
                    fnBefore=null;
                }

                var fn_result = fn(e)

                if(fnAfter!==null) {
                    fnAfter();
                    fnAfter=null;
                }
                return fn_result
            }
        )
        return this
    }
    //$.fn.onxx = function() {
    //    console.log(fnOverlap, fnBefore, fnAfter)
    //}

}) (jQuery, window);

(function ($, window) {
    var types = {
        1:'enterprise',
        2:'department',
        3:'person'
    }
    var placeholders = {
        'name': {
            'default':tr('Name here'),
            'enterprise':tr('Enterprise name'),
            'department':tr('Department name'),
            'person':tr('Person name')
        },
        'job_title': tr('Job title'),
        'ph_mobile': tr('Mobile phone'),
        'ph_internal': { 'default':tr('Phone'), 'person':tr('Int.#') },
        'email': {
            'default':tr('Email address'),
            'enterprise':tr('Enterprise email address'),
            'department':tr('Common department email address')
        },
        'skype': tr('Skype name'),
        'comment': tr('Any comments'),
        'lync': tr('Lync account id'),
        'external_url': tr('Corporate site address')
    }
    var template = {
        2: { selector: "div#dept-card.template",
             class: "card card-dept"
        },
        1: {
            selector: "div#enterprise-card.template",
            class: "card card-entr"
        },
        3: {
            selector: "div#person-card.template",
            class: "card"
        }
    }
    // if no args:
    //   returns card itself if invoked on a card item
    //   returns card items if invoked applied on a partition
    //   returns card if applied to element inside card
    // if first arg === 'id'
    //   return card-id of the card
    // if first arg is a number then returns card with specified id
    $.fn.card = function (arg,val) {
        var obj,
            $selector=this

        if(this!==[]) {
            if (this.is('[card-id]')) {
                obj = this;
            } else if (this.is('[part-id]')) {
                obj = this.find('[card-id]')
            } else if (this.parents('[card-id]').length > 0) {
                obj = this.parents('[card-id]')
            } else {
                obj = this.find('.card')
            }
            if (arguments.length > 0) {
                if (arg === 'id') {
                    if (val === undefined)
                        return obj.attr('card-id')
                    return obj.attr('card-id', val)
                }
                if (arg === 'type')
                    return obj.attr('type') || 3
                if (typeof(arg) === "number")
                    obj = $('div.card[card-id=' + arg + ']')
                if (arg === "person")
                    obj = this.find('div.card[type!=1][type!=2]')
                if (arg === "department")
                    obj = this.find('div.card[type=2]')
                if (arg === "enterprise")
                    obj = this.find('div.card[type=1]')
            }
        }
        return {
            //log: function() {console.log(this); return this;},
            $: obj,
            $selector: $selector,
            type: obj.attr('type') || 3,
            id: _id, //obj.attr('card-id') || obj.attr('part-id'),
            get: function(data_id) { if(data_id==='id') return this.id(); else return this.span(data_id).text()},
            set: _set,
            span: _span,
            isNew: function() { return this.id()==='new' },
            item: _item,
            details: _details,
            brief: _brief,
            hasDetails: _hasDetails,
            showDetails: _showDetails,
            hideDetails: _hideDetails,
            toggleDetails: _toggleDetails,
            enableToggling: _enableToggling,
            disableToggling: _disableToggling,
            enableEditing: _enableEditing,
            disableEditing: _disableEditing,
            partition: _partition,
            create: _create,
            remove: _remove,
            prepareDataToSend: _prepareDataToSend,
            placeholder: _placeholder,
            animate: function() { return this.$.animate.apply( this.$, arguments) },
            show: function() { return this.$.show() },
            hide: function() { return this.$.hide() },
            data: function() { return this.$.data.apply( this.$, arguments) },
            first: function() { return this.$.first() },
            last: function() { return this.$.last() }
       }
    }

    function _span(data_id,value) {
        var $span=this.$.find('span.inline[data-id='+data_id+']')
        if(value!==undefined)
            $span.text(value)
        return $span
    }

    function _set(data_id,value) {
        if(data_id==='card-id' || data_id==='id') {
            this.$.attr('card-id',value)
            //this.id=value
        }
        this.span(data_id,value)
    }

    function _placeholder(name) {
        //console.log(this.type,types[this.type],placeholders[name],placeholders[name][types[this.type]],placeholders[name]['default']);

        if(typeof placeholders[name]=='object' ) {
            if (types[this.type] in  placeholders[name])
                return placeholders[name][types[this.type]]
            else
                return placeholders[name]['default']
        } else
            return placeholders[name]
            //console.log('an object ',this.type,typeof placeholders[name])

        //    return placeholders[name]['default']
        //return placeholders[name][types[this.type]]==undefined ?  placeholders[name]['default'] : placeholders[name][types[this.type]]
    }

    function _remove() {
        var card_id=this.id(), //attr('card-id'),
            $this=this.$
        //console.log("confirmed removal of ",card_id)
        if(card_id!=="new") {
            $.ajax('index.php?r=card/remove&id=' + card_id)
                .done(function (resp) {
                    var active_part = $.part.active()
                    if ((active_part.data('last_created_card') !== undefined) &&
                        (card_id === active_part.data('last_created_card').card('id'))) {
                        active_part.removeData("last_created_card")
                    }
                    $this.remove()
                    $.fn.onx({overlap: null})
                    //console.log("removed:", resp)
                })
                .fail(function (data) {
                    //console.log("fail:", data)
                })
        }
        else {
            $this.remove()
            $.fn.onx({overlap: null})
        }
    }

    function _prepareDataToSend() {

        //var card_id = this.id()

        // Find previous card and its id. If it is first or single then set to 0.
        var prev_card=this.$.prevAll('[card-id!="new"]').first()
        var prev_id = (prev_card.length>0 ? prev_card.attr('card-id') : 0)

        return {
            card_id: this.id(),
            prev_id: prev_id,
            p_id: $.part.active().attr('part-id'),
            type: this.$.attr('type') || 3,
            data: {}
        }
    }

    // private functions
    function _partition () {
        var part=this.$.parents('div [part-id]')
        if(part===[]) { // we are outside partition object in DOM
            part = $.part.active() // find partitions down the DOM tree
        }
        this.$=$(part)
        return this
    }

    function _id() {
        var $this=this.$
        return $this.attr('card-id')
            || $this.attr('part-id')
    }

    function _item(dataid, val) {
        if (arguments.length == 1)
            return this.$.find('span[data-id=' + dataid + ']').text()
        if (arguments.length > 1)
            return this.$.find('span[data-id=' + dataid + ']').text(val)
    }

    function _details(sel) {
        if(sel===undefined)
            return this.$.find('.row.details')
        return this.$.find('.row.details').find(sel)
    }

    function _brief() {
        return this.$.find('.row.brief')
    }

    function _hasDetails()
    {
        var detailed_fields=['ph_mobile','skype','comment','lync'],
            details_detected=false,
            spans = this.details('span.inline')

        spans.each(function() {
            if(details_detected) return
            var span = $(this)

            if(detailed_fields.indexOf(span.attr('data-id'))>=0) // is one of specific detail fields?
                if (span.text() !== "")  // is not empty?
                    details_detected=true
        })
        return details_detected
    }

    function _showDetails (callback) {
        animate=(this.$.length===1)
        if((this.id()!=="new" && !this.hasDetails()) || this.$.data('shown')) return this

        return this.$.each(function() {
            if ($(this).is('[type=1]') || $(this).is('[type=2]'))
                return //no way to collapse departments and enterprises
            var card=$(this).card(),
                ///brief=card.brief(),
                details=card.details()
            ///if(animate)
            ///    brief.animate({'height':'toggle'},500,function() { brief.hide() } )
            ///else
            ///    brief.hide()
            card
                //.enableEditing()
                .data("shown",true)
            if(animate)
                details
                    .animate({height:'toggle'},
                    {   duration: 500,
                        complete: callback
                    })
            else
                details.show()

        })
    }
    function _hideDetails () {
        animate=(this.$.length===1)
        return this.$.each(function() {
            if ($(this).is('[type=1]') || $(this).is('[type=2]'))
                return //no way to collapse departments and enterprises
            var card=$(this).card()
            ///if(animate)
            ///    card.brief().animate({'height':'toggle'},500).show()
            ///else
            ///    card.brief().show()
            ///populatePlaceholders($(this).card())
            card
                .data("shown",false)
            if(animate)
                card
                    .details()
                    .animate({'height':'toggle'},500,function() { card.details().hide() } )
            else
                card.details().hide()
        })
    }
    function _toggleDetails () {
        //console.log(arguments.callee, ' by ', arguments.callee.caller)
        var invokedOn = this.$selector[0].tagName,
            skippingTags = ["I", "A"]

        if(skippingTags.indexOf(invokedOn) > -1) return false // do not toggle
        if(this.$.data("shown"))
            return this.hideDetails();
        else {
            return this.showDetails();
        }
        //})
    }

    function _enableToggling() {
        if(this.$.find("div.details").length>0) // attach handler only if details exist
            this.$
                .onx('click',  function (e) {
                    $(e.target).card().toggleDetails()
                })
        return this
    }

    function _disableToggling() {
        this.$.off('click')
        return this
    }

    function _create (opt) {
        //var $this=this.$
        var active_part= $.part.active()

        // get last created card or the latest card in the partition
        var last_card=active_part.data('last_created_card')
        var $this=(last_card===undefined ? active_part.card().$.last() : last_card)
        if($this.length>0) {
            // place the new one after chosen last
            $this.after($(template[opt.type].selector).clone())
            $this = $this.next()
        } else { // this is first card in the partition
            active_part.append($(template[opt.type].selector).clone())
            $this=active_part.children().first()
        }
        // save new card as last_created_card for next iterations
        active_part.data('last_created_card',$this)
        // process the new card
        $this
            .removeAttr('id')
            .addClass(template[opt.type].class+' edit')
            .removeClass('template')
            .find('span.inline')
        if(opt.type==3) {
            $this.card()
                .enableEditing()
                .showDetails(function () {
                    _scrollNewCard($this)
                })
        }
        else {
            $this.card()
                .enableEditing()
            _scrollNewCard($this)
        }
        return $this.card()

    }

    function _enableEditing() {
        if($('#phonebook').data('edit-mode')==false)
            return this
        this.$.each(function() {
            var card=$(this).card()
            if(!card.$.hasClass('edit')) return
            if (card.data('editable')==true) {
                return
            }
            card.data('editable', true)
            card.$.find('a.btn-remove').show()
            card.$.find('a.btn-remove').onx('click',clickRemove);
            var spans = card.$.find('span.inline')
            card.$.addClass('form-group')

            spans.each(function () {
                var span = $(this),
                    data_id = span.attr('data-id')
                span.before(_input(card,data_id))
                span.onx('click', spanClick)
                var placeholder_text = card.placeholder(data_id)
                span.find(':input').attr('placeholder',placeholder_text)
                if (span.text() == "") {
                    span.text(placeholder_text)
                    span.addClass('ph') //class indicating that it is a placeholder text, not an actual data
                }
            })
        })

        //prepareToEdit(this.$)
        return this
    }

    function _disableEditing() {
        this.$.each(function() {
            var $this=$(this)
            $this.card().data('editable', false)
            $this.card().$.removeClass('form-group')
            $this.find('input.inline,textarea.inline').remove()
            $this.find('span.inline').off()
            $this.find('a.btn-remove').hide()
            $this.find('a.btn-remove').off()
        })
        return this
    }

    function _input(card,data_id) {
        if(data_id==="comment")
            return "<textarea name='comment' class='inline form-control' placeholder='"+card.placeholder(data_id)+"'/></textarea>"
        return "<input class='inline form-control' placeholder='"+card.placeholder(data_id)+"' name='"+data_id+"'/>"
    }

    function _scrollNewCard(obj) {
        $('body').animate({
            scrollTop: (obj.prev().length>0 ? obj.prev().offset().top : obj.offset().top)
        }, 500)
    }

    $.part = {
        active: function () { return $('[part-id].active') },
        createCard: _createCard,
        activateSearchResultsTab: _activateSearchResultsTab,
        deactivateSearchResultsTab: _deactivateSearchResultsTab,
        onSelect: _onSelect
    };

    function _onSelect(e) {
        var tab_id=$(e.target).attr('href')//.substring(1)

        if($(tab_id).hasClass('edit')) {
            $('#manager-controls').show()
        } else {
            $('#manager-controls').hide()
        }
        _deactivateSearchResultsTab(tab_id)
        return true
    }

    function _deactivateSearchResultsTab(tab_id) {
        var $phonebook = $('#phonebook'),
            $tab_tags = $phonebook.find('ul.nav-tabs'),
            $tab_pane = $phonebook.find('div.tab-pane'),
            prevTab=$tab_tags.data('prevTab')

        $("div#phonebook div.tab-content").removeClass('search')

        // if not from search tab then normal flow
        if($tab_tags.find('li.search.active').length===0) {
            $phonebook.find('.card').fadeIn()
            return
        }

        $tab_tags.find('li.search').removeClass('active').fadeOut()
        $phonebook.find('li a[href=#dp-tab-'+prevTab+']').parent().addClass('active')

        $tab_pane.each(function() {
            if($(this).attr('part-id')!==prevTab) {
                $(this).removeClass('active')
            }
            else {
                $(this).addClass('active')
            }
        })
        $phonebook.find('.card').fadeIn()
        $phonebook.data().plugin_searcher._lastValue=""
    }

    function _activateSearchResultsTab()
    {
        var $phonebook=$('#phonebook'),
            $tab_tags=$phonebook.find('ul.nav-tabs'),
            $tab_pane=$phonebook.find('div.tab-pane')

        $("div#phonebook div.tab-content").addClass('search')

        // if no search tab yet - make it
        if($tab_tags.find('li.search').length===0)
            _addSearchResultsTab()
        else
            $tab_tags.find('li.search').fadeIn()

        //remeber current tab to have return on search clear
        $tab_tags.data('prevTab', $.part.active().attr('part-id'))

        //active tag
        $tab_tags.find('li.active').removeClass('active')
        $tab_tags.find('li.search').addClass('active')

        // and show all tabs contents
        $tab_pane.addClass('active')
    }

    function _addSearchResultsTab() {
        var $phonebook=$('#phonebook'),
            $tab_tags=$phonebook.find('ul.nav-tabs')

        $tab_tags.prepend('<li class="search"><a href="#dp-tab-search" class="glyphicon glyphicon-search"></a></li>')
    }

    function _createCard() {
        $().card().create()
    }

})(jQuery, window);

$('div.tab-pane').card('person').enableToggling()

$("input.inline, a.btn-remove").hide();
$('#navpin-btn').onx('click', clickPin)
//$('#navpin-btn').on('click', clickPin)

$('#phonebook').data('edit-mode',false)
$('#actions-dd').hide()//.addClass('disabled')
$('#phonebook ul.nav-tabs li a').onx('click', $.part.onSelect)

$("#phonebook").searcher({
    itemSelector: ".card",
    textSelector: "span",
    inputSelector: "#searchbox",
    highlight: "<span class='highlight'>$1</span>",
    toggle: function(item, containsText) {
        if (containsText)
            $(item).fadeIn();
        else
            $(item).fadeOut();
    }
});

$("#phonebook").on( 'mouseup', function(e) {
    var t = (document.all) ? document.selection.createRange().text : document.getSelection();
    if(t.type=="Range") {
        $.fn.onx({ overlap: function() { return false } })
        return false
    }
    return true;
} )

$('#search-btn').onx('click',$("#phonebook").data().plugin_searcher._fnInputHandler)//_onValueChange)
$('#reset-btn').onx('click',$("#phonebook").data().plugin_searcher._fnResetHandler)//_resetSearch)
$('.btn-report').onx('click',submitTypoReport)



function submitTypoReport(e) {
    var $report_modal=$('#typoreport-modal'),
        card=$(e.target).card(),
        card_type = $(e.target).card('type'),
        card_id = $(e.target).card('id'),
        enterprise_id, department_id,

        $partition_id = $report_modal.find('input#typoreportform-partition_id'),
        $related_card_id = $report_modal.find('input#typoreportform-related_card_id'),
        $enterprise_id = $report_modal.find('input#typoreportform-enterprise_id'),
        $department_id = $report_modal.find('input#typoreportform-department_id')

    // common data to send
    $related_card_id.val(card_id)
    $department_id.val('')
    $enterprise_id.val('')

    if(card_type == 3) { // it's person card
        //console.log('type == 3')
        enterprise_id = card.$.prevAll('[type=1]:first').attr('card-id')
        if(enterprise_id!==undefined) {
            $enterprise_id.val(enterprise_id)
            department_id = card.$.prevAll('[type=1]:first ~ [type=2]').first().attr('card-id')
            if(department_id!==undefined) {
                $department_id.val(department_id)
            }
        }
    }
    if(card_type == 2) { // it's department card, looking for the enterprise card
        //console.log('type == 2')
        enterprise_id = card.$.prevAll('[type=1]:first').attr('card-id')
        if(enterprise_id!==undefined)
            $enterprise_id.val(enterprise_id)
    }
    // else, it is an enterprise card, no additional info needed

    //console.log(card_id, department_id, enterprise_id)
    $partition_id.val(card.partition().id()) // partition() modifies card.$ so it is last in queue
    $report_modal.modal('show')
}

function populatePlaceholders(card)
{
    if(card.brief().find('[data-id=name]').text()=="")
        card.brief().find('[data-id=name]').text($.placeholders['name'])
}

