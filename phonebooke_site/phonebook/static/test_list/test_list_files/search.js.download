/*! jQuery Searcher Plugin - v0.1.0 - 2014-08-18
 * https://github.com/lloiser/jquery-searcher/
 * Copyright (c) 2014 Lukas Beranek; Licensed MIT 
 */
(function IIFE() {

    "use strict";

    function factory($)
    {
        var pluginName = "searcher",
            dataKey = "plugin_" + pluginName,
            defaults = {
                // selector for the item element
                itemSelector: "tbody > tr",
                // selector for the text elements
                textSelector: "td",
                // selector for the input
                inputSelector: "",
                // determines whether the search is case sensitive or not
                caseSensitive: false,
                // function to toggle the visibility of the item
                toggle: function(item, containsText)
                {
                    $(item).toggle(containsText);
                }
            },
            colors=['#F9F2BD','#489075','#68979B','#4F618F','#D48A6A','#9C73A9','#7887AB','#C8D168','#D4C26A'],
            color_index= 0,
            color=colors[0];

        function Searcher(element, options)
        {
            this.element = element;

            this.options = $.extend({ }, defaults, options);

            this._create();
        }

        Searcher.prototype = {
            dispose: function()
            {
                // unbind all events
                this._$input.unbind("." + pluginName);
                // toggle all elements with true
                var options = this.options,
                    toggle = options.toggle || defaults.toggle;
                this._$element.find(options.itemSelector).each(function() { toggle(this, true); });
            },
            _create: function()
            {
                var options = this.options;

                this._$element = $(this.element);

                this.tiktak=0

                // find the input and bind to various events
                this._fnInputHandler = $.proxy(this._onValueChange, this);
                this._fnSearchRoutine = $.proxy(this._makeSearch, this);
                this._fnResetHandler = $.proxy(this._resetSearch, this);
                this._bindOnChangeHandler()

                // remember the last entered value
                this._lastValue = "";

                // call the toggle with true for all items on startup
                var toggle = options.toggle || defaults.toggle;
                this._$element.find(options.itemSelector).each(function() { toggle(this, true); });
            },
            _bindOnChangeHandler: function()
            {
                var eventNames = "input." + pluginName + " change." + pluginName + " keyup." + pluginName;
                this._$input = $(this.options.inputSelector).bind(eventNames, this._fnInputHandler);
            },
            _unbindOnChangeHandler: function()
            {
                //var eventNames = "input." + pluginName + " change." + pluginName + " keyup." + pluginName;
                $(this.options.inputSelector).unbind()//bind(eventNames, this._fnInputHandler);
            },
            _onValueChange: function(e) {
                // here is set and stop/reset timeout on each input event
                // do actual search then timeout time is out

                //try {
                    // if input detected but timeout is not reached
                //console.log('onvalch:', e)
                this.event=e
                //console.log('change:',this)
                var delay=666
                if(this.event.keyCode==13 || this.event.type=='click') {
                    $.part.activateSearchResultsTab()
                    //console.log('go ahead to search tab')
                    delay=0
                    e.preventDefault()

                    //return
                }
                if(this.tiktak>=0) {
                    clearTimeout(this.tiktak)
                    this.tiktak=setTimeout(this._fnSearchRoutine,delay)
                    //console.log('reset timer')
                    return
                }
                // if tiktak<0 means that search is in progress and needs to be broken
                if(this.tiktak<0) {
                    this.tiktak=0 // _makeSearch checks this value on each iteration and throws if 0
                }
                //}
                //catch(e) {
                //    console.log('caught: search has been stopped')
                //    this._onValueChange() // force reset timers
                    // here catch search break event (exception) if user continue typing
                    // while app is still searching
                //}
            },
            _makeSearch: function() {
                var options = this.options,
                    textSelector = options.textSelector,
                    toggle = options.toggle || defaults.toggle,
                    $this=this,
                    startTime=new Date().getTime();

                this.tiktak=-1 //mark that we've started searching

                // build the regular expression for searching
                var flags = "gm" + (!options.caseSensitive ? "i" : "");
                var value = new RegExp("(" + escapeRegExp(this._$input.val()) + ")", flags);
                if (value.toString() === this._lastValue)
                    return; // nothing has changed

                var matches=[],
                    enterprise_name="",
                    enterprise_text="",
                    department_text="",
                    searching_part_id=0;

                this._$input.val().split(' ').forEach(function (v,i) {
                    if (v.toString()!=="")
                        matches.push(new RegExp("(" + escapeRegExp(v.toString()) + ")", flags))
                })

                this._lastValue = value.toString();

                this._$element
                    .find(options.itemSelector)
                    .each(function eachItem() {
                        var $item = $(this),
                            //$textElements = textSelector ? $item.find(textSelector) : $item,
                            $textElements = $item.find(textSelector),
                            itemContainsText,
                            matches_total=0,
                            whole_text="",
                            cur_partition_id;

                        $textElements.each(function eachTextElement() {
                            var elem_text=$(this).text()
                            whole_text += (elem_text === undefined ? "" : elem_text)
                        })


                        cur_partition_id=$item.card().partition().id()
                        if (cur_partition_id!==searching_part_id) {
                            searching_part_id = cur_partition_id
                            //console.log(searching_part_id)
                            enterprise_text=""
                            department_text=""
                        }

                        if($item.card('type')==1) {
                            enterprise_name=$item.find('span.inline[data-id=name]').text() //save the name to inject later into a person card
                            //color=colors[color_index]
                            //if(colors.length-color_index-1)
                            //    color_index++
                            //else
                            //    color_index=0

                            color=randomColor({luminosity: 'light'})
                            enterprise_text=whole_text
                            department_text=""
                            //console.log(enterprise_text)
                        } else {
                            if ($item.card('type')==2) {
                            department_text=whole_text
                            //console.log(department_text)
                        } else {//item.card('type')==3) {
                            $item.find('div.row.entr div').text(enterprise_name)
                            $item.find('div.row.entr div').css('background-color',color)
                            whole_text += (department_text + enterprise_text)
                            //console.log(whole_text)
                        }}

                            matches.forEach(function(v,i) {
                            if(whole_text.match(v)) {
                                    matches_total += 1;
                                }
                            })
                        //console.log(matches_total)

                            itemContainsText = (matches.length===matches_total)

                        toggle(this, itemContainsText);
                    });
                this.tiktak=0 //mark that searching is finished
                console.log('search complete in '+(new Date().getTime()-startTime)+' ms')
            },
            _resetSearch: function(e) {
                //console.log('reset:',this)
                this._$input.val("")
                $.part.deactivateSearchResultsTab()
                e.preventDefault()
            }
        };

        function escapeRegExp(text)
        {
            // see https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
            return text.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        }

        $.fn[pluginName] = function pluginHandler(options) {
            return this.each(function() {
                var searcher = $.data(this, dataKey);
                if (searcher && options === "dispose")
                {
                    searcher.dispose();
                    $.removeData(this, dataKey);
                }
                // update the options of the existing
                else if (searcher)
                    $.extend(searcher.options, options);
                // create a new searcher
                else if (typeof(options) === "object")
                    $.data(this, dataKey, new Searcher(this, options));
            });
        };

    }

// AMD style (register as an anonymous module)
    if (typeof(define) === "function" && define.amd)
        define(["jquery"], factory);
// node/CommonJS style (for Browserify)
    else if (typeof(exports) === "object")
        module.exports = factory;
// browser
    else
        factory(jQuery);

}).call(this);

/* 
* randomColor.js
* Copyright (c) 2014 David Merfield
*/
;(function(root, factory) {

  // Support AMD
  if (typeof define === 'function' && define.amd) {
    define([], factory);

  // Support CommonJS
  } else if (typeof exports === 'object') {
    var randomColor = factory();
    
    // Support NodeJS & Component, which allow module.exports to be a function
    if (typeof module === 'object' && module && module.exports) {
      exports = module.exports = randomColor;
    }
    
    // Support CommonJS 1.1.1 spec
    exports.randomColor = randomColor;
  
  // Support vanilla script loading
  } else {
    root.randomColor = factory();
  };

}(this, function() {

  // Shared color dictionary
  var colorDictionary = {};

  // Populate the color dictionary
  loadColorBounds();

  var randomColor = function(options) {
    options = options || {};

    var H,S,B;

    // Check if we need to generate multiple colors
    if (options.count != null) {

      var totalColors = options.count,
          colors = [];

      options.count = null;

      while (totalColors > colors.length) {
        colors.push(randomColor(options));
      }

      options.count = totalColors;

      return colors;
    }

    // First we pick a hue (H)
    H = pickHue(options);

    // Then use H to determine saturation (S)
    S = pickSaturation(H, options);

    // Then use S and H to determine brightness (B).
    B = pickBrightness(H, S, options);

    // Then we return the HSB color in the desired format
    return setFormat([H,S,B], options);
  };

  function pickHue (options) {

    var hueRange = getHueRange(options.hue),
        hue = randomWithin(hueRange);

    // Instead of storing red as two seperate ranges,
    // we group them, using negative numbers
    if (hue < 0) {hue = 360 + hue}

    return hue;

  }

  function pickSaturation (hue, options) {

    if (options.luminosity === 'random') {
      return randomWithin([0,100]);
    }

    if (options.hue === 'monochrome') {
      return 0;
    }

    var saturationRange = getSaturationRange(hue);

    var sMin = saturationRange[0],
        sMax = saturationRange[1];

    switch (options.luminosity) {

      case 'bright':
        sMin = 55;
        break;

      case 'dark':
        sMin = sMax - 10;
        break;

      case 'light':
        sMax = 55;
        break;
   }

    return randomWithin([sMin, sMax]);

  }

  function pickBrightness (H, S, options) {

    var brightness,
        bMin = getMinimumBrightness(H, S),
        bMax = 100;

    switch (options.luminosity) {

      case 'dark':
        bMax = bMin + 20;
        break;

      case 'light':
        bMin = (bMax + bMin)/2;
        break;

      case 'random':
        bMin = 0;
        bMax = 100;
        break;
    }

    return randomWithin([bMin, bMax]);

  }

  function setFormat (hsv, options) {

    switch (options.format) {

      case 'hsvArray':
        return hsv;

      case 'hslArray':
        return HSVtoHSL(hsv);

      case 'hsl':
        var hsl = HSVtoHSL(hsv);
        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';

      case 'rgbArray':
        return HSVtoRGB(hsv);

      case 'rgb':
        var rgb = HSVtoRGB(hsv);
        return 'rgb(' + rgb.join(', ') + ')';

      default:
        return HSVtoHex(hsv);
    }

  }

  function getMinimumBrightness(H, S) {

    var lowerBounds = getColorInfo(H).lowerBounds;

    for (var i = 0; i < lowerBounds.length - 1; i++) {

      var s1 = lowerBounds[i][0],
          v1 = lowerBounds[i][1];

      var s2 = lowerBounds[i+1][0],
          v2 = lowerBounds[i+1][1];

      if (S >= s1 && S <= s2) {

         var m = (v2 - v1)/(s2 - s1),
             b = v1 - m*s1;

         return m*S + b;
      }

    }

    return 0;
  }

  function getHueRange (colorInput) {

    if (typeof parseInt(colorInput) === 'number') {

      var number = parseInt(colorInput);

      if (number < 360 && number > 0) {
        return [number, number];
      }

    }

    if (typeof colorInput === 'string') {

      if (colorDictionary[colorInput]) {
        var color = colorDictionary[colorInput];
        if (color.hueRange) {return color.hueRange}
      }
    }

    return [0,360];

  }

  function getSaturationRange (hue) {
    return getColorInfo(hue).saturationRange;
  }

  function getColorInfo (hue) {

    // Maps red colors to make picking hue easier
    if (hue >= 334 && hue <= 360) {
      hue-= 360;
    }

    for (var colorName in colorDictionary) {
       var color = colorDictionary[colorName];
       if (color.hueRange &&
           hue >= color.hueRange[0] &&
           hue <= color.hueRange[1]) {
          return colorDictionary[colorName];
       }
    } return 'Color not found';
  }

  function randomWithin (range) {
    return Math.floor(range[0] + Math.random()*(range[1] + 1 - range[0]));
  }

  function HSVtoHex (hsv){

    var rgb = HSVtoRGB(hsv);

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    }

    var hex = "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);

    return hex;

  }

  function defineColor (name, hueRange, lowerBounds) {

    var sMin = lowerBounds[0][0],
        sMax = lowerBounds[lowerBounds.length - 1][0],

        bMin = lowerBounds[lowerBounds.length - 1][1],
        bMax = lowerBounds[0][1];

    colorDictionary[name] = {
      hueRange: hueRange,
      lowerBounds: lowerBounds,
      saturationRange: [sMin, sMax],
      brightnessRange: [bMin, bMax]
    };

  }

  function loadColorBounds () {

    defineColor(
      'monochrome',
      null,
      [[0,0],[100,0]]
    );

    defineColor(
      'red',
      [-26,18],
      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]
    );

    defineColor(
      'orange',
      [19,46],
      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]
    );

    defineColor(
      'yellow',
      [47,62],
      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]
    );

    defineColor(
      'green',
      [63,178],
      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]
    );

    defineColor(
      'blue',
      [179, 257],
      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]
    );

    defineColor(
      'purple',
      [258, 282],
      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]
    );

    defineColor(
      'pink',
      [283, 334],
      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]
    );

  }

  function HSVtoRGB (hsv) {

    // this doesn't work for the values of 0 and 360
    // here's the hacky fix
    var h = hsv[0];
    if (h === 0) {h = 1}
    if (h === 360) {h = 359}

    // Rebase the h,s,v values
    h = h/360;
    var s = hsv[1]/100,
        v = hsv[2]/100;

    var h_i = Math.floor(h*6),
      f = h * 6 - h_i,
      p = v * (1 - s),
      q = v * (1 - f*s),
      t = v * (1 - (1 - f)*s),
      r = 256,
      g = 256,
      b = 256;

    switch(h_i) {
      case 0: r = v, g = t, b = p;  break;
      case 1: r = q, g = v, b = p;  break;
      case 2: r = p, g = v, b = t;  break;
      case 3: r = p, g = q, b = v;  break;
      case 4: r = t, g = p, b = v;  break;
      case 5: r = v, g = p, b = q;  break;
    }
    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];
    return result;
  }

  function HSVtoHSL (hsv) {
    var h = hsv[0],
      s = hsv[1]/100,
      v = hsv[2]/100,
      k = (2-s)*v;

    return [
      h,
      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,
      k/2 * 100
    ];
  }

  return randomColor;
}));
